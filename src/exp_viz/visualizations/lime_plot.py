from operator import itemgetter
from . import Plot
from . import VisualizationsObjectivesEnum

class LIMEPlot(Plot):
    """
    Class that generates visualization for LIME explanations and also gives a textual explanation
    to help on the visualization's interpretation.
    """
    objective: str = VisualizationsObjectivesEnum.LIME_PLOT.value

    def _display_textual_explanation(self, explanations: any) -> None:
        l_lime_features = sorted(explanations.as_list(),key=itemgetter(1))
        text_exp = f'''This visualization is divided in three parts. The first one, shows the
        target classes of the problem and the probability generated by the model for each of them.
        The second shows the most important features, sorted from most important to least
        important, showing how much each of them contributed to the final probabilities and for
        which class they contributed. It also gives the conditions from the locally trained model
        that were activated by the feature value along with their contribution. For the chosen
        observation, the conditions that were activated and had the highest contributions for the
        positive class were {l_lime_features[-1][0]}, {l_lime_features[-2][0]},
        {l_lime_features[-3][0]}, and the conditions that were activated and had the highest
        contributions for the negative class were {l_lime_features[0][0]}, {l_lime_features[1][0]},
        {l_lime_features[2][0]}. The third part gives the list of features, also sorted by
        importance, and their values in the predicted instance, coloring each line with the color
        that represents the class that they contributed to.'''
        print(text_exp)

    def generate_explanation(self, explanations: any) -> None:
        self._display_textual_explanation(explanations)
        explanations.show_in_notebook(show_table=True)
